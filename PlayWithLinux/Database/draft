=================================================
TYPE

char, bool, int, float, string

struct Point
{
	x : int;
	y : int;
}

enum Operator
{
	Add, Sub, Mul, Div
}

class BinaryExpression : Expression
{
	left	: Expression;
	right	: Expression;
	op		: Operator;
}

struct Head{head : int; next : List;}
struct End{}
union List = Head | End;

=================================================
TABLE

enum Gender
{
	Male, Female
}

class Person
{
	name	: string;
	gender	: Gender;
}

# Simple data table
data Spouses(husband : Person, wife : Person);

# Data table with index
data Spouses(husband : Person, wife : Person)
	index	Ordered(husband.name),	// members after "." should not be field of a class
			Hash(wife.name)
	where	husband != wife
	;

# Computation data table
data class Person(p : Person)	// means that all instances of Person are automatically indexed in this table
	index	p.Name
	;	
data Parents(child : Person, parent : Person);

data Spouses(husband : Person, wife : Person); 
Spouses(husband, wife) :-
	Person(child),
	Parents(child, husband), husband.Gender == Gender.Male,
	Parents(child, wife), wife.Gender == Gender.Female
	;

set Parents(Bob, Jeff);
set Parents(Bob, Kate);

# Cached computation data table
data Spouses(husband : Person, wife : Person)
	index	Ordered, Unique, Cache(husband.name),
			Hash, Unique, Cache(wife.name)
	where	husband != wife
	;


=================================================
FUNCTION

func Name(arg1, in arg2, out arg3 ...); 
	// "in" cannot be used with pattern
	// "out" cannot be used in the function, except to be assigned

func Fib(in i, out o);
case Fib(1, 1);
case Fib(2, 1);
case Fib(a, b) :- Fib(a-1, x), Fib(a-2, y), b = x + y;

func Fib_(int a, int b, in index, int max, out o);
case Fib_(a, b, index, index, b);
case Fib_(a, b, index, max b, o) :- Fib_(b, a + b, index + 1, max, o);
func Fib(in i, out o) :- Fib_(0, 1, i, 1, o);

=================================================
EXPRESSION

<BOOLEAN>		::= <OR> {"," <OR>}
<OR>			::= <AND> {or <AND>}
<AND>			::= <FUNCTION-CALL>
				::= <COMPARISON>
				::= "(" <BOOLEAN> ")"
<FUNCTION-CALL>	::= <NAME> "(" {<PATTERN>, ...} ")"
<COMPARISON>	::= <EXPRESSION> (== | != | < | <= | > | >=) <EXPRESSION>

<EXPRESSION>	::= ...
=================================================
PATTERN MATCHING

_								: any, not referenced in the code
Union{pattern1, pattern2 ,...}	: union
id								: any, referenced in the code
<constant-value>				: the specified constant value
=================================================
TABLE OPERATION STATEMENTS

set Table(value1, value2, value3 ...);
remove Table(value1, value2, value3 ...);
remove Table(a, b, _) :- a == b;
uncache Table;
uncache Table(a, b, _) :- a == b;
=================================================
GRAPH STORAGE

=================================================
MODULE / NAMESPACE / DATABASE

=================================================
