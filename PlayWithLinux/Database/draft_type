database Types;

####################################

data List a = List a | Empty

func reverse_ a b =
	switch a (
		Empty : b
		List c d : reverse_ d (List c b)
	)

func reverse a b = reverse_ a Empty

func concat a b = reverse_ (reverse a) b

####################################
# the following code should be imported from Vczh Parser Generator

namespace ast
{
	class Node
	(
	);

	class Type : NOde
	(
	);
	
	class RefType : Type
	(
		name : string
	);
	
	class ApplyType : Type
	(
		function : Type,
		argument : Type
	);
	
	class Expression : Node
	(
	);

	class NumExpr : Expression
	(
		number : int
	);
	
	class RefExpr : Expression
	(
		name : string
	);
	
	class ApplyExpr : Expression
	(
		function : Expression,
		argument : Expression
	);
	
	class MatchItem : Node
	(
		pattern : Type,
		result : Expression
	);
	
	class MatchExpr : Expression
	(
		expression : Expression,
		items : MatchItem[]
	);
	
	class Declaration : Node
	(
	);
	
	class Argument : Node
	(
		name : string
	);

	class DataItem : Node
	(
		name : string,
		arguments : Type[]
	);
	
	class DataDecl : Declaration
	(
		name : string,
		arguments : Argument[],
		items : DataItem[]
	);
	
	class FuncDecl : Declaration
	(
		name : string,
		arguments : Argument[]
		result : Expression
	);
	
	class Program : Node
	(
		declarations : Declaration[]
	);
}
####################################

namespace symbol
{
	class Type
	(
	);

	class IntType : Type
	(
	);

	class FuncType : Type
	(
		argument : Type,
		result : Type
	);

	class ApplyType : Type
	(
		function : Type,
		argument : Type
	);

	class LambdaArgumentType : Type
	(
		belongTo : LambdaType
	);

	class LambdaType : Type
	(
		type : Type
	);

	data Types(name : string, type : Type)
		index	Hash(name),
				Unique(name);

	data class Scope
	(
		parent : Scope,
		children : Scope[],
	);
	data index Scope.parent * Scope.children : 1..n;
	data Symbols(scope : Scope, name : string, type : Type, createdBy : Node)
		index	Hash(scope),
				Hash(name),
				Unique(scope, name);
	data AstScopes(scope : Scope, node : ast.Node)
		index	Hash(node),
				Unique(scope, node);
}
