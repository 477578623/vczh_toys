database Types;

####################################

data List a = List a | Empty

func reverse_ a b =
	switch a (
		Empty : b
		List c d : reverse_ d (List c b)
	)

func reverse a b = reverse_ a Empty

func concat a b = reverse_ (reverse a) b

####################################
# the following code should be imported from Vczh Parser Generator

namespace ast
{
	class Type
	(
	);
	
	class RefType : Type
	(
		name : string
	);
	
	class ApplyType : Type
	(
		function : Type,
		argument : Type
	);
	
	class Expression
	(
	);
	
	class RefExpr : Expression
	(
		name : string
	);
	
	class ApplyExpr : Expression
	(
		function : Expression,
		argument : Expression
	);
	
	class MatchItem
	(
		pattern : Type,
		result : Expression
	);
	
	class MatchExpr : Expression
	(
		expression : Expression,
		items : MatchItem[]
	);
	
	class Declaration
	(
	);
	
	class DataItem
	(
		name : string,
		arguments : Type[]
	);
	
	class Argument
	(
		name : string
	);
	
	class DataDecl : Declaration
	(
		name : string,
		arguments : Argument[],
		items : DataItem[]
	);
	
	class FuncDecl : Declaration
	(
		name : string,
		arguments : Argument[]
		result : Expression
	);
	
	class Program
	(
		declarations : Declaration[]
	);
}
####################################
